{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05E2\\u05E0\\u05D1\\u05E8\\\\Desktop\\\\react\\\\past\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\n//import AuthContext from \"./store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const ctx = useContext(AuthContext);\n  /*const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const storedUserLoggedInInformation = localStorage.getItem(isLoggedIn);\n  useEffect(() => {\n    if (storedUserLoggedInInformation === 1) {\n      setIsLoggedIn(true);\n    }\n  }, []);\n   const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    setIsLoggedIn(true);\n    localStorage.setItem(\"isLoggedIn\", 1);\n  };\n   const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n  */\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 29\n      }, this), ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useContext","Login","Home","MainHeader","AuthContext","App","ctx","isLoggedIn"],"sources":["C:/Users/ענבר/Desktop/react/past/src/App.js"],"sourcesContent":["import React, { useContext } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\n//import AuthContext from \"./store/auth-context\";\n\nfunction App() {\n  const ctx = useContext(AuthContext);\n  /*const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const storedUserLoggedInInformation = localStorage.getItem(isLoggedIn);\n  useEffect(() => {\n    if (storedUserLoggedInInformation === 1) {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    setIsLoggedIn(true);\n    localStorage.setItem(\"isLoggedIn\", 1);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n  */\n\n  return (\n    <React.Fragment>\n      <MainHeader />\n      <main>\n        {!ctx.isLoggedIn && <Login />}\n        {ctx.isLoggedIn && <Home />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAEzC,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,WAAW,MAAM,sBAAsB;AAC9C;AAAA;AAEA,SAASC,GAAG,GAAG;EAAA;EACb,MAAMC,GAAG,GAAGN,UAAU,CAACI,WAAW,CAAC;EACnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAIE,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBACb,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG,eACd;MAAA,WACG,CAACE,GAAG,CAACC,UAAU,iBAAI,QAAC,KAAK;QAAA;QAAA;QAAA;MAAA,QAAG,EAC5BD,GAAG,CAACC,UAAU,iBAAI,QAAC,IAAI;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACtB;EAAA;IAAA;IAAA;IAAA;EAAA,QACQ;AAErB;AAAC,GAhCQF,GAAG;AAAA,KAAHA,GAAG;AAkCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}